/* @flow */

import VNode, { createTextVNode } from 'core/vdom/vnode'
import { isFalse, isTrue, isDef, isUndef, isPrimitive } from 'shared/util'

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
// 模板编译器试图通过在编译时静态分析模板来最小化规范化的需要。对于纯HTML标签，是完全可以跳过规范化的，因为render函数会
// 保证返回一个由VNode组成的数组。

// 有两种情况是需要额外的规范化的
// 1. 当子组件包含了组件的时候，由于函数式组件是可以返回一个数组的而不是返回一个独立的根节点，在这种情况下，
// 由于函数式组件本身已经对自己的子组件做了规范化的处理，所以只需要做一下简单的规范化就可以了，
//通过Array.prototyp.concat对数组做扁平化处理，保证只有一级的深度。

// 简单规范化：对子组件做扁平化处理
export function simpleNormalizeChildren (children: any) {
  for (let i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
// 2. 当render是用户手写的时候，children是可以为简单的文本节点的，此时children不是一个数组
// 这种情况下需要创建一个文本节点，并转为数组的格式；
// 当编译的是slot、v-for、template时会产生嵌套数组的情况，这种情况就调用nolmalizeArrayChildren来规范化
export function normalizeChildren (children: any): ?Array<VNode> {
  return isPrimitive(children)
    ? [createTextVNode(children)] // 文本字符串，转为VNode文本节点
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node): boolean {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children: any, nestedIndex?: string): Array<VNode> {
  const res = []
  let i, c, lastIndex, last
  for (i = 0; i < children.length; i++) {
    c = children[i]
    if (isUndef(c) || typeof c === 'boolean') continue
    lastIndex = res.length - 1
    last = res[lastIndex]
    // 嵌套数组
    if (Array.isArray(c)) {
      if (c.length > 0) {
        // 递归处理
        c = normalizeArrayChildren(c, `${nestedIndex || ''}_${i}`)
        // 如果存在两个连续的text节点，会把它们合并成一个text节点
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]: any).text)
          c.shift() // 合并后移除头节点
        }
        res.push.apply(res, c)
      }
    } else if (isPrimitive(c)) { // 普通类型
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        // 如果存在两个连续的文本节点，则合并为一个
        // 这对SSR hydration是必要的，因为文本节点在呈现为HTML字符串时基本上是合并的
        res[lastIndex] = createTextVNode(last.text + c)
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c))
      }
    } else { // 已经是VNnode类型
      if (isTextNode(c) && isTextNode(last)) {
        // 如果存在两个连续的文本节点，则合并为一个
        res[lastIndex] = createTextVNode(last.text + c.text)
      } else {
        // default key for nested array children (likely generated by v-for)
        // 给嵌套数组每个元素一个默认的key（如v-for）
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = `__vlist${nestedIndex}_${i}__`
        }
        res.push(c)
      }
    }
  }
  return res
}
